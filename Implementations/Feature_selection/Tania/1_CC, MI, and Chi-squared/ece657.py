# -*- coding: utf-8 -*-
"""ECE657.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OXB_GePLoJgqxe9M0yERj_m1244vUguN
"""

!pip install -U -q PyDrive
import os
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# 1. Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# choose a local (colab) directory to store the data.
local_download_path = os.path.expanduser('~/data')
try:
  os.makedirs(local_download_path)
except: pass

# 2. Auto-iterate using the query syntax
#    https://developers.google.com/drive/v2/web/search-parameters
file_list = drive.ListFile(
    {'q': "'1imx6kKXQA1S3my_bnNlixt_XfWd3kJDi' in parents"}).GetList()

for f in file_list:
  # 3. Create & download by id.
  print('title: %s, id: %s' % (f['title'], f['id']))
  fname = os.path.join(local_download_path, f['title'])
  print('downloading to {}'.format(fname))
  f_ = drive.CreateFile({'id': f['id']})
  f_.GetContentFile(fname)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import load_iris
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.feature_selection import mutual_info_classif
from scipy.stats import pearsonr
from sklearn import svm
from sklearn.svm import SVC  
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
import pickle
from sklearn.naive_bayes import GaussianNB



path_dataset_save = '/content/data/'

file = open(path_dataset_save+'X_train_picked.pckl','rb')
X_train_picked = pickle.load(file); file.close()
file = open(path_dataset_save+'X_test_picked.pckl','rb')
X_test_picked = pickle.load(file); file.close()
file = open(path_dataset_save+'y_train_picked.pckl','rb')
y_train_picked = pickle.load(file); file.close()
file = open(path_dataset_save+'y_test_picked.pckl','rb')
y_test_picked = pickle.load(file); file.close()

A=pd.DataFrame(X_train_picked)
B=pd.DataFrame(y_train_picked)
C=pd.DataFrame(X_test_picked)
D=pd.DataFrame(y_test_picked)

A.to_csv('X_train_picked.csv')
B.to_csv('Y_train_picked.csv')
C.to_csv('X_test_picked.csv')
D.to_csv('Y_test_picked.csv')

from google.colab import files

files.download('X_train_picked.csv') 
#files.download('Y_train_picked.csv') 
#files.download('X_test_picked.csv') 
#files.download('Y_test_picked.csv')

df1 = pd.DataFrame(X_train_picked)

Y=pd.DataFrame(y_train_picked)
Y.columns=['f1']

#---------------------------------CHI-SQUARED-----------------------------------------------------------------------------------

X=df1;
#Using all the samples for 
c=SelectKBest(chi2, k=400)
c.fit_transform(X,Y)
names1 = X.columns.values[c.get_support()]

names1

#tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],'C': [1, 10, 100,1000]}]
#clf = GridSearchCV( LassoLarsCV(), parameters, cv=6, n_jobs=4, verbose=1)
#clf1 = GridSearchCV(GaussianNB(),  cv=3)
clf1=GaussianNB()
clf1.fit(X[names1],Y)
#clf1.fit(df1[names1],Y)
#clf1.fit(X,Y)
#clf.grid_scores_
#print (clf1.grid_scores_)
#model = clf1.best_estimator_

X1=pd.DataFrame(X_test_picked)
Y1=pd.DataFrame(y_test_picked)

y_pred = clf1.predict(X1[names1])

accuracy_score(Y1, y_pred)

#---------------------------------------MI-------------------------------------------------------------------------------
c2=SelectKBest(mutual_info_classif, k=400)
c2.fit_transform(X,Y)
names2 = X.columns.values[c2.get_support()]

clf2=GaussianNB()
clf2.fit(X[names2],Y)

names2

X1=pd.DataFrame(X_test_picked)
Y1=pd.DataFrame(y_test_picked)
y_pred = clf2.predict(X1[names2])

Y1.shape

accuracy_score(Y1, y_pred)

result = X.join(Y,how='outer')
result
X3=result.loc[1:10001,abs(result.corr()['f1']>0.01)]
X3=X3.drop(['f1'],axis=1)
len(X3.columns)

clf3=GaussianNB()
clf3.fit(X3,Y[1:10000])

X1=pd.DataFrame(X_test_picked)
Y1=pd.DataFrame(y_test_picked)
y_pred = clf3.predict(X1[X3.columns])

accuracy_score(Y1, y_pred)